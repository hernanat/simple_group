- children = @comments_by_parent[comment.id]
.comment.votable{ id: comment.short_id }
  %span.scoring{ id: "scoring_#{comment.short_id}" }
    %div{ id: "upvote_#{comment.short_id}", class: control_classes(comment, :upvote) }
    %div{ id: "score_#{comment.short_id}", class: control_classes(comment, :score) }
      = comment.score
    %div{ id: "downvote_#{comment.short_id}", class: control_classes(comment, :downvote) }
  %span.hide-comment
  .comment-line1
    %span.author= link_to comment.commenter, "#"
    %span= submitted_time_text(comment)
    |
    %span.link= link_to t(".link"), "##{comment.short_id}", data: { turbolinks: false }
    |
    %span.link= link_to t(".reply"), "", class: "reply"
    - if allowed_to?(:remove?, comment, with: CommentPolicy)
      |
      - if comment.comment_removal.present?
        %span.link= link_to t(".removed"),
          admin_comment_removal_path(comment.comment_removal.id)
      - else
        %span.link= link_to t(".remove"),
          new_admin_comment_removal_path(comment_removal: { comment_id: comment.id })
  - if children.present?
    .comment-tree-line
  .comment-content{ id: "comment_content_#{comment.short_id}" }
    .comment-body.latex-container.markdownable{ id: "tree_#{comment.short_id}" }
      = sanitize CommonMarker.render_html(comment.body.gsub("\\", "\\\\\\"))
    .comment-reply-box{ id: "reply_#{comment.short_id}" }
      = render "comments/form", submission_short_id: @submission.short_id, comment: Comment.new,
        parent_id: comment.id
    .comment-replies{ id: "replies_#{comment.short_id}" }
      - if children.present?
        = render partial: "comments/comment", collection: children
